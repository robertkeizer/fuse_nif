/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __blkcnt_t = __int64_t;
pub type __blksize_t = __int32_t;
pub type __dev_t = __int32_t;
pub type __fsblkcnt_t = __uint64_t;
pub type __fsfilcnt_t = __uint64_t;
pub type __gid_t = __uint32_t;
pub type __ino_t = __uint64_t;
pub type __mode_t = __uint32_t;
pub type __nlink_t = __uint32_t;
pub type __off_t = __int64_t;
pub type __pid_t = __int32_t;
pub type __time_t = __int64_t;
pub type __uid_t = __uint32_t;
pub type u_int32_t = __uint32_t;
pub type blkcnt_t = __blkcnt_t;
pub type blksize_t = __blksize_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type ino_t = __ino_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pid_t = __pid_t;
pub type time_t = __time_t;
pub type off_t = __off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::std::mem::MaybeUninit<timespec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_mode: mode_t,
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atim: timespec,
    pub st_mtim: timespec,
    pub st_ctim: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: u_int32_t,
    pub st_gen: u_int32_t,
    pub __st_birthtim: timespec,
}
#[test]
fn bindgen_test_layout_stat() {
    const UNINIT: ::std::mem::MaybeUninit<stat> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        128usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_dev) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ino) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_nlink) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_uid) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_rdev) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_atim) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_mtim) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_ctim) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_size) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blocks) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_blksize) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_flags) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).st_gen) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__st_birthtim) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(__st_birthtim)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct statvfs {
    pub f_bsize: ::std::os::raw::c_ulong,
    pub f_frsize: ::std::os::raw::c_ulong,
    pub f_blocks: fsblkcnt_t,
    pub f_bfree: fsblkcnt_t,
    pub f_bavail: fsblkcnt_t,
    pub f_files: fsfilcnt_t,
    pub f_ffree: fsfilcnt_t,
    pub f_favail: fsfilcnt_t,
    pub f_fsid: ::std::os::raw::c_ulong,
    pub f_flag: ::std::os::raw::c_ulong,
    pub f_namemax: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_statvfs() {
    const UNINIT: ::std::mem::MaybeUninit<statvfs> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<statvfs>(),
        88usize,
        concat!("Size of: ", stringify!(statvfs))
    );
    assert_eq!(
        ::std::mem::align_of::<statvfs>(),
        8usize,
        concat!("Alignment of ", stringify!(statvfs))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bsize) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_frsize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_frsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_blocks) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_blocks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bfree) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bfree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_bavail) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_bavail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_files) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_files)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_ffree) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_ffree)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_favail) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_favail)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_fsid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_fsid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_flag) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_flag)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).f_namemax) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(statvfs),
            "::",
            stringify!(f_namemax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct flock {
    pub l_start: off_t,
    pub l_len: off_t,
    pub l_pid: pid_t,
    pub l_type: ::std::os::raw::c_short,
    pub l_whence: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::std::mem::MaybeUninit<flock> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<flock>(),
        24usize,
        concat!("Size of: ", stringify!(flock))
    );
    assert_eq!(
        ::std::mem::align_of::<flock>(),
        8usize,
        concat!("Alignment of ", stringify!(flock))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(flock),
            "::",
            stringify!(l_whence)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct utimbuf {
    pub actime: time_t,
    pub modtime: time_t,
}
#[test]
fn bindgen_test_layout_utimbuf() {
    const UNINIT: ::std::mem::MaybeUninit<utimbuf> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<utimbuf>(),
        16usize,
        concat!("Size of: ", stringify!(utimbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<utimbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(utimbuf))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).actime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(actime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modtime) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(utimbuf),
            "::",
            stringify!(modtime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_args {
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub allocated: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_args() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_args> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_args>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_args))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_args>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_args))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argc) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).argv) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allocated) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_args),
            "::",
            stringify!(allocated)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_opt {
    pub templ: *const ::std::os::raw::c_char,
    pub off: ::std::os::raw::c_ulong,
    pub val: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_fuse_opt() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_opt> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_opt>(),
        24usize,
        concat!("Size of: ", stringify!(fuse_opt))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_opt>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_opt))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).templ) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(templ)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).off) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(off)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_opt),
            "::",
            stringify!(val)
        )
    );
}
pub type fuse_opt_proc_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut fuse_args,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn fuse_opt_add_arg(
        arg1: *mut fuse_args,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_insert_arg(
        arg1: *mut fuse_args,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_free_args(arg1: *mut fuse_args);
}
extern "C" {
    pub fn fuse_opt_add_opt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_add_opt_escaped(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_match(
        arg1: *const fuse_opt,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_opt_parse(
        arg1: *mut fuse_args,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *const fuse_opt,
        arg4: fuse_opt_proc_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_chan {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_session {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_file_info {
    pub flags: i32,
    pub fh_old: u32,
    pub writepage: i32,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub fh: u64,
    pub lock_owner: u64,
}
#[test]
fn bindgen_test_layout_fuse_file_info() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_file_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_file_info>(),
        32usize,
        concat!("Size of: ", stringify!(fuse_file_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_file_info>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_file_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh_old) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh_old)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).writepage) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(writepage)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fh) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(fh)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock_owner) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_file_info),
            "::",
            stringify!(lock_owner)
        )
    );
}
impl fuse_file_info {
    #[inline]
    pub fn direct_io(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_direct_io(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn keep_cache(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_keep_cache(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn flush(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flush(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn nonseekable(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_nonseekable(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __padd(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 27u8) as u32) }
    }
    #[inline]
    pub fn set___padd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 27u8, val as u64)
        }
    }
    #[inline]
    pub fn flock_release(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_flock_release(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        direct_io: u32,
        keep_cache: u32,
        flush: u32,
        nonseekable: u32,
        __padd: u32,
        flock_release: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let direct_io: u32 = unsafe { ::std::mem::transmute(direct_io) };
            direct_io as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let keep_cache: u32 = unsafe { ::std::mem::transmute(keep_cache) };
            keep_cache as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let flush: u32 = unsafe { ::std::mem::transmute(flush) };
            flush as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let nonseekable: u32 = unsafe { ::std::mem::transmute(nonseekable) };
            nonseekable as u64
        });
        __bindgen_bitfield_unit.set(4usize, 27u8, {
            let __padd: u32 = unsafe { ::std::mem::transmute(__padd) };
            __padd as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let flock_release: u32 = unsafe { ::std::mem::transmute(flock_release) };
            flock_release as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_conn_info {
    pub proto_major: u32,
    pub proto_minor: u32,
    pub async_read: u32,
    pub max_write: u32,
    pub max_readahead: u32,
    pub capable: u32,
    pub want: u32,
    pub max_background: u32,
    pub congestion_threshold: u32,
    pub reserved: [u32; 23usize],
}
#[test]
fn bindgen_test_layout_fuse_conn_info() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_conn_info> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_conn_info>(),
        128usize,
        concat!("Size of: ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_conn_info>(),
        4usize,
        concat!("Alignment of ", stringify!(fuse_conn_info))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto_major) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).proto_minor) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(proto_minor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).async_read) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(async_read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_write) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_readahead) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_readahead)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capable) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(capable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).want) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(want)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_background) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(max_background)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).congestion_threshold) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(congestion_threshold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_conn_info),
            "::",
            stringify!(reserved)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_context {
    pub fuse: *mut fuse,
    pub uid: uid_t,
    pub gid: gid_t,
    pub pid: pid_t,
    pub private_data: *mut ::std::os::raw::c_void,
    pub umask: mode_t,
}
#[test]
fn bindgen_test_layout_fuse_context() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_context>(),
        40usize,
        concat!("Size of: ", stringify!(fuse_context))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_context>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fuse) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(fuse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).uid) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(uid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gid) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(gid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).private_data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(private_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).umask) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_context),
            "::",
            stringify!(umask)
        )
    );
}
pub type fuse_fill_dir_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const stat,
        arg4: off_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_dirhandle {
    _unused: [u8; 0],
}
pub type fuse_dirh_t = *mut fuse_dirhandle;
pub type fuse_dirfil_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: fuse_dirh_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ino_t,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse_operations {
    pub getattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
        ) -> ::std::os::raw::c_int,
    >,
    pub readlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub getdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: fuse_dirh_t,
            arg3: fuse_dirfil_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mknod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: dev_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub mkdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub unlink: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub rmdir: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
    >,
    pub symlink: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub rename: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub link: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub chmod: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub chown: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: uid_t,
            arg3: gid_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub truncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
        ) -> ::std::os::raw::c_int,
    >,
    pub utime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut utimbuf,
        ) -> ::std::os::raw::c_int,
    >,
    pub open: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub statfs: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut statvfs,
        ) -> ::std::os::raw::c_int,
    >,
    pub flush: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub release: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsync: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub setxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
            arg4: usize,
            arg5: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub getxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_char,
            arg4: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub listxattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int,
    >,
    pub removexattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub opendir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub readdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_void,
            arg3: fuse_fill_dir_t,
            arg4: off_t,
            arg5: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub releasedir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fsyncdir: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut fuse_conn_info) -> *mut ::std::os::raw::c_void,
    >,
    pub destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub access: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub create: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: mode_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub ftruncate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: off_t,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub fgetattr: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut stat,
            arg3: *mut fuse_file_info,
        ) -> ::std::os::raw::c_int,
    >,
    pub lock: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut fuse_file_info,
            arg3: ::std::os::raw::c_int,
            arg4: *mut flock,
        ) -> ::std::os::raw::c_int,
    >,
    pub utimens: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const timespec,
        ) -> ::std::os::raw::c_int,
    >,
    pub bmap: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: usize,
            arg3: *mut u64,
        ) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_fuse_operations() {
    const UNINIT: ::std::mem::MaybeUninit<fuse_operations> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<fuse_operations>(),
        304usize,
        concat!("Size of: ", stringify!(fuse_operations))
    );
    assert_eq!(
        ::std::mem::align_of::<fuse_operations>(),
        8usize,
        concat!("Alignment of ", stringify!(fuse_operations))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getattr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readlink) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getdir) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mknod) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mknod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mkdir) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(mkdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).unlink) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(unlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rmdir) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rmdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).symlink) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(symlink)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rename) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(rename)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).link) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(link)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chmod) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chmod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chown) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(chown)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).truncate) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(truncate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utime) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(utime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).open) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).read) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(read)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).write) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(write)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).statfs) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(statfs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flush) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(flush)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsync) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsync)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).setxattr) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(setxattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).getxattr) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(getxattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).listxattr) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(listxattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).removexattr) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(removexattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).opendir) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(opendir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).readdir) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(readdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releasedir) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(releasedir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fsyncdir) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fsyncdir)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(destroy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).access) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).create) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(create)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftruncate) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(ftruncate)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fgetattr) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(fgetattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lock) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).utimens) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(utimens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bmap) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(fuse_operations),
            "::",
            stringify!(bmap)
        )
    );
}
extern "C" {
    pub fn fuse_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_main(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const fuse_operations,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_new(
        arg1: *mut fuse_chan,
        arg2: *mut fuse_args,
        arg3: *const fuse_operations,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_void,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_setup(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const fuse_operations,
        arg4: usize,
        arg5: *mut *mut ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_void,
    ) -> *mut fuse;
}
extern "C" {
    pub fn fuse_parse_cmdline(
        arg1: *mut fuse_args,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_mount(arg1: *const ::std::os::raw::c_char, arg2: *mut fuse_args) -> *mut fuse_chan;
}
extern "C" {
    pub fn fuse_remove_signal_handlers(arg1: *mut fuse_session);
}
extern "C" {
    pub fn fuse_set_signal_handlers(arg1: *mut fuse_session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_get_session(arg1: *mut fuse) -> *mut fuse_session;
}
extern "C" {
    pub fn fuse_get_context() -> *mut fuse_context;
}
extern "C" {
    pub fn fuse_is_lib_option(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_loop(arg1: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_loop_mt(arg1: *mut fuse) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_chan_fd(arg1: *mut fuse_chan) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_unmount(arg1: *const ::std::os::raw::c_char, arg2: *mut fuse_chan);
}
extern "C" {
    pub fn fuse_daemonize(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fuse_destroy(arg1: *mut fuse);
}
extern "C" {
    pub fn fuse_teardown(arg1: *mut fuse, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn fuse_invalidate(
        arg1: *mut fuse,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fuse {
    pub _address: u8,
}
